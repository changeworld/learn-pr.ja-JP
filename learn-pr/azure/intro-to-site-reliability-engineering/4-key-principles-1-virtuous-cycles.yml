### YamlMime:ModuleUnit
uid: learn.intro-to-site-reliability-engineering.4-key-principles-1-virtuous-cycles
title: '重要な SRE 原則とプラクティス: 好循環'
metadata:
  title: '重要な SRE 原則とプラクティス: 好循環'
  description: '重要な SRE 原則とプラクティス: 好循環'
  ms.date: 09/26/2018
  author: markjulmar
  ms.author: smmark
  ms.topic: interactive-tutorial
  ms.prod: learning-azure
  ms.openlocfilehash: 632ab6aeec2ad4c2cff90470b13008470de7ca99
  ms.sourcegitcommit: 537334e6f8df2da7b9e5ec96a2b54a0e2038bc1b
  ms.translationtype: HT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/28/2018
  ms.locfileid: "47439422"
durationInMinutes: 10
content: >
  [!include[](includes/4-key-principles-1-virtuous-cycles.md)]
quiz:
  title: 自分の知識をチェックする
  questions:
  - content: (SRE コンテキストにおいて) SLI は何の略ですか?
    choices:
    - content: 'Standard Level Indicator '
      isCorrect: false
      incorrectExplanation: SLI は、Service Level Indicator (サービス レベル指標) の略です。
    - content: Service Level Indicator
      isCorrect: true
    - content: Safe Load Indicator
      isCorrect: false
      incorrectExplanation: SLI は、Service Level Indicator (サービス レベル指標) の略です。
    - content: System Level Interface
      isCorrect: false
      incorrectExplanation: SLI は、Service Level Indicator (サービス レベル指標) の略です。
  - content: (SRE コンテキストにおいて) SLO は何の略ですか?
    choices:
    - content: Service Level Outcome
      isCorrect: false
      incorrectExplanation: SLO は、Service Level Objective. (サービス レベル目標) の略です。
    - content: Standard Line Operations
      isCorrect: false
      incorrectExplanation: SLO は、Service Level Objective. (サービス レベル目標) の略です。
    - content: Service Load Objective
      isCorrect: false
      incorrectExplanation: SLO は、Service Level Objective. (サービス レベル目標) の略です。
    - content: Service Level Objective
      isCorrect: true
  - content: サービスのエラー予算を使い果たした場合、何をする必要がありますか?
    choices:
    - content: コンプライアンス状態に戻せるように、関連するサービスをすぐに再起動する
      isCorrect: false
      incorrectExplanation: エラー予算は目標に関係しているため、時間の経過と共に、サービスの信頼性の集計を追跡する方法です。 これには、許容可能な信頼性の欠如の度合いを超えたときに、組織がどのように反応するかについて共通の認識を持つことが重要です。 考えられる反応は多くあり、ご自身の特定の状況に最適なものを選択して、それを守る必要があります。 すべての人およびすべての状況に適した反応はありません。
    - content: サービスが合意された信頼性のレベルに戻るまで、そのソフトウェアの今後のリリースを延期する
      isCorrect: false
      incorrectExplanation: エラー予算は目標に関係しているため、時間の経過と共に、サービスの信頼性の集計を追跡する方法です。 これには、許容可能な信頼性の欠如の度合いを超えたときに、組織がどのように反応するかについて共通の認識を持つことが重要です。 考えられる反応は多くあり、ご自身の特定の状況に最適なものを選択して、それを守る必要があります。 すべての人およびすべての状況に適した反応はありません。
    - content: このサービスに関連付けられているエンジニアリング リソースを、機能開発から信頼性の問題の修正にすぐに転換する
      isCorrect: false
      incorrectExplanation: エラー予算は目標に関係しているため、時間の経過と共に、サービスの信頼性の集計を追跡する方法です。 これには、許容可能な信頼性の欠如の度合いを超えたときに、組織がどのように反応するかについて共通の認識を持つことが重要です。 考えられる反応は多くあり、ご自身の特定の状況に最適なものを選択して、それを守る必要があります。 すべての人およびすべての状況に適した反応はありません。
    - content: 以前にそのエラー予算を作成するときに合意したサービスまたは組織に固有の方法で反応する
      isCorrect: true
      correctExplanation: サービスのエラー予算を設定するときには、予算を使い果たしたときに組織がどのように反応するかを決める (および文書化する) ことが重要です。 考えられる反応は多くあり、ご自身の特定の状況に最適なものを選択して、それを守る必要があります。 エラー予算は、時間の経過と共に、サービスの信頼性の集計を追跡する方法です。 これには、許容可能な信頼性の欠如の度合いを超えたときに、組織がどのように反応するかについて共通の認識を持つことが重要です。 考えられる反応は多くあり、ご自身の特定の状況に最適なものを選択して、それを守る必要があります。 すべての人およびすべての状況に適した反応はありません。
  - content: サービスのエラー予算を超過した場合、何をする必要がありますか?
    choices:
    - content: そのサービスのリリース周期を短縮する
      isCorrect: false
      incorrectExplanation: これは正解に近いですが、重要な要素が省略されています。 サービスの信頼性を損なう可能性があることを行ったとしても、信頼性がまだ望ましいレベルにある場合は、リリース周期を増やすことで、そのヘッドルームを "使い果たす" ことは理にかなっています。 ただしそれは、可能な反応の 1 つに過ぎません。 何を行うのが適切なのかは、特定の状況によって異なります。
    - content: そのサービスの機能開発にもっと集中して、これらの機能をより速くデプロイする
      isCorrect: false
      incorrectExplanation: これは正解に近いですが、重要な要素が省略されています。 サービスの信頼性を損なう可能性があることを行ったとしても、信頼性がまだ望ましいレベルにある場合は、機能速度を高めることで、そのヘッドルームを "使い果たす" ことは理にかなっています。 ただしそれは、可能な反応の 1 つに過ぎません。 何を行うのが適切なのかは、特定の状況によって異なります。
    - content: 場合による
      isCorrect: true
      correctExplanation: 余ったエラー予算を " 使う" には、さまざまな方法があります。 リリース周期を短縮する、機能速度を高める、より多くのベータ機能をデプロイする、より中断を伴うテストを実施するといった方法があります。 何も行わず、単により高い信頼性レベルで運用しても問題ありません (ただしこれには、独自の一連の問題が伴います)。 これらの反応はすべて状況に固有のもので、ご自身の特定の状況で決める必要があります。
  - content: ダウンタイムやその他のインシデントが発生した場合、関係者をすぐに辞めさせるべきですか?
    choices:
    - content: はい。間違いを犯した人は、自身の行動に対して常に責任を負い、結果に対して償う必要があります。
      isCorrect: false
      incorrectExplanation: 辞めさせても信頼性を得ることはできません。 このような状況で責めを負わせる文化がある場合、組織はインシデントから学習することができず、そもそもそれを引き起こしたプロセスとテクノロジを改善できなくなります。 このフィードバック ループがないと、組織はインシデントを排除するのではなく、常にインシデントに対応せざるを得なくなります。
    - content: 特定のまれで異常な状況を除き、いいえ
      isCorrect: true
      correctExplanation: 継続的な改善のためには、責めない事後分析のようなフィードバック ループが重要です。 組織は、関係者 (おそらく何が起こったかを最もよく理解している人) を辞めさせるのではなく、インシデントから学習すれば、組織のサービス、システム、製品の信頼性に直接効果を発揮することができます。
